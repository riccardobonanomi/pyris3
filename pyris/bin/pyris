#!/usr/bin/env python
# =============================================
# Script: pyris
# Package: PyRIS
# Author: Federico Monegaglia
# Mantainer: Riccardo Bonanomi
# Date: April 2016
# Version: 3.2.1
# Last update: 24 April 2024
# Description: Wrapper script for PyRIS package
# =============================================

import os, sys
from datetime import datetime
import argparse
import warnings
from pyris.info import __name__, __fullname__, __version__
from pyris.misc import ToC

import configparser as ConfigParser

class ParserException( Exception ): pass

toc = ToC() # starting computation time

# ============================
# Parse Command Line Arguments
# ============================
parser = argparse.ArgumentParser( description='%s v%s :: %s' % (__name__, __version__, __fullname__) )
# Version
parser.add_argument( '-v', '--version', action='version', version='%s v%s' % (__name__, __version__) )
# Config Settings
parser.add_argument( 'config', nargs='?', help='input configuration file' )
parser.add_argument( '-i', '--init', action='store_true', help='initialize a config file with default settings' )
parser.add_argument( '--select-black-mask', type=str, help='interactively draw black masks from landsat data' )
# Merge Landsat Folders
parser.add_argument( '--merge', nargs='+', help='landsat folders to be merged together (requires gdal_merge)' )
parser.add_argument( '--output', type=str, help='where merged landsat are to be stored' )
# mask automatic choice label for segmetantion and raw masks
parser.add_argument( '--label', type=str, help='if auto, pyris will try to label masks by itself. other options are max and all' )
# Segmentation
parser.add_argument( '-S', '--segmentation', action='store_true', help='perform segmentation of all the landsat folders' )
# raw .tif mask import
parser.add_argument( '-R', '--raw-mask-import', action='store_true', help='import raw .tif masks obtained outside PyRIS to be cleaned' )
parser.add_argument( '--raw-dir', type=str, help='dir in which to read ordered-by-name raw .tif mask' )
# to be removed gee .tif mask import  # TODO Remove this in version 3.2.2
parser.add_argument( '-G', '--gee-mask-import', action='store_true', help='is deprecated from version 3.2.1, use the raw mask import' )
parser.add_argument( '--gee-dir', type=str, help='is deprecated from version 3.2.1, use the raw mask import' )
# manual cleaning of mask
parser.add_argument( '--clean-mask', nargs='*', help='manually clean some branches' )
parser.add_argument( '--clean-label', default='single', type=str, help='if all it will apply the cleaning to all the subsequent ones too' )
# Skeletonization
parser.add_argument( '-K', '--skeletonization', action='store_true', help='skeletonize masks' )
# Axis Extraction
parser.add_argument( '-A', '--axis', action='store_true', help='extract main channel axis from channel mask' )
parser.add_argument( '--mask-dir', type=str, help='directory containing mask files' )
parser.add_argument( '--no-geo', action='store_true', help='do not georeference mask files' )
# Planform Migration
parser.add_argument( '-M', '--migration', action='store_true', help='compute migration rates of subsequent axis' )
parser.add_argument( '--axis-files', nargs='+', help='ordered sequence of files for which the migration rates must be computed' )
parser.add_argument( '--axis-dir', type=str, help='dir in which to read ordered-by-name axis files (if --axis-files is not specified)' )
parser.add_argument( '--axis-columns', nargs=2, default=[0,1], help='columns containing axis coordinates' )
parser.add_argument( '--output-dir', default='migration_output', help='directory where outputs fof migration rates will be stored' )
parser.add_argument( '--pfreq', default=1, type=int, help='an interpolation step between points to be used as a frequency filter (a few channel widths in pixels).' )
# Bars Position
parser.add_argument( '-B', '--bars', action='store_true', help='compute the position of channel bars' )
parser.add_argument( '--show', action='store_true', help='show results after computing' )

# Parse Arguments
args = parser.parse_args()

# Initialize Config File
# ----------------------
if args.init:
    from pyris.config import default_config
    cf = default_config()
else:
    if args.config is not None:
        cf = ConfigParser.RawConfigParser()
        cf.read( args.config )
        if len( sys.argv ) == 2:
            print('reading configuration file %s' % args.config)
            for section in cf.sections():
                print('\n[%s]' % section)
                for option in cf.options( section ):
                    print('%s = %s' % ( option, cf.get( section, option ) ))
    elif args.merge is not None:
        pass
    elif args.clean_mask is not None:
        pass
    else:
        if args.axis_files is None and args.axis_dir is None:
            e = 'Too few arguments. Either <config> or <axis files> or <merge> or <clean mask files> must be given\n'
            parser.print_help()
            raise ParserException(e)

# Merge Landsat Files
# -------------------
if args.merge is not None:
    # WARNING!! This only works on linux! ## FIXME!
    import subprocess
    p = subprocess.Popen( ['which', 'gdal_merge.py'], stdout=subprocess.PIPE )
    path, gdal_merge = os.path.split( p.communicate()[0].strip() )
    if gdal_merge == '': raise ImportError('gdal_merge.py not found')
    if args.output == os.path.split( args.merge[0] )[0]: raise ValueError('Please select a different path for the output')
    if not os.path.isdir( args.output ): os.mkdir( args.output )
    sys.path.append( path )
    exec( 'from %s import main as merge' % os.path.splitext( gdal_merge )[0] )
    for i in range(1,8):
        dirs = [ dir[:-1] if dir.endswith('/') else dir for dir in args.merge ]
        odir = os.path.join( args.output, os.path.basename(dirs[0]) )
        if not os.path.isdir( odir ): os.mkdir( odir )
        ofile = os.path.join( odir, os.path.basename(dirs[0])+'_B%d.TIF' % i )
        merge_args = [ 'gdal_merge.py' ]
        for arg in dirs:
            pattern = '_B%d.TIF' % i
            if i==6 and not os.path.isfile( os.path.join( arg, os.path.basename(arg)+pattern ) ):
                pattern = pattern.replace('.TIF', '_VCID_1.TIF')
            merge_args += [ os.path.join( arg, os.path.basename(arg)+pattern ) ]
        merge_args += [ '-o', ofile, '-n', '0' ]
        print('Merging band %d...' % i)
        merge( merge_args )

# Individual Settings
# -------------------
if hasattr( args, 'settings' ):
    for section in cf.sections():
        for key, val in args.settings.iteritems():
            if cf.has_option( section, key ):
                cf.set( section, key, val )
                print('Set: [%s] %s = %s' % ( section, key, val ))

 # Interactiverly Draw Black Mask
# ------------------------------
if args.select_black_mask is not None:
    from pyris.misc import interactive_mask
    print('Select black masks')
    black_masks = interactive_mask( args.select_black_mask )()
    cf.set( 'Segmentation', 'black_masks', black_masks )

# Store Configuration File
# ------------------------
if args.config is not None:
    with open( args.config, 'w' ) as cfg_file: cf.write( cfg_file )
    if args.init:
        print('Configuration file %s created. Exiting.' % args.config)
        sys.exit()

# ===================
# Run PyRIS Functions
# ===================

# Set Up PyRIS Environment
# ------------------------
if args.config is not None:
    geodir      = os.path.join( cf.get( 'Data', 'output' ), 'geotransf' )
    rawdir      = os.path.join( cf.get( 'Data', 'output' ), 'raw'       )
    maskdir     = os.path.join( cf.get( 'Data', 'output' ), 'mask'      )
    skeldir     = os.path.join( cf.get( 'Data', 'output' ), 'skeleton'  )
    axisdir     = os.path.join( cf.get( 'Data', 'output' ), 'axis'      )
    migdir      = os.path.join( cf.get( 'Data', 'output' ), 'migration' )
    bardir      = os.path.join( cf.get( 'Data', 'output' ), 'bars'      )
    if not args.raw_mask_import:
        landsat_dirs = sorted( [ os.path.join(cf.get('Data','input'), f) for f in os.listdir(cf.get('Data','input'))
                             if os.path.isdir( os.path.join(cf.get('Data','input'), f) ) ] )
    # log file
    name = os.path.splitext( os.path.basename( args.config ) )[0]
    log_file = os.path.join( cf.get( 'Data', 'output' ), name + '.log' )
    if not os.path.isfile( log_file ):
        with open( log_file, 'w' ) as lf: lf.write( 'PyRIS log file for %s\n' % name )
    with open( log_file, 'a' ) as lf: lf.write( 'Code started execution: %s\n' % datetime.now().strftime('%Y-%m-%d %H:%M:%S') )

# Perform Image Segmentation
# --------------------------
if args.segmentation:
    if not os.path.isdir( maskdir ): os.makedirs( maskdir )
    if not os.path.isdir( geodir  ): os.makedirs( geodir  )
    with open( log_file, 'a' ) as lf: lf.write( 'Rejected Landsat images:\n')
    from pyris import segment_all
    title = 'Running image segmentation over the external directory: %s' % cf.get( 'Data', 'input' )
    print(); print(title); print('-'*len(title))
    segment_all( landsat_dirs, geodir, cf, maskdir, auto_label=args.label, log_file=log_file )

# Import raw .tif mask
# --------------------
if args.gee_mask_import or args.gee_dir is not None:  # TODO Remove this in version 3.2.2
    w = 'The gee mask import is deprecated, use the raw mask import -R and the raw mask dir --raw-dir.'
    warnings.warn( w, UserWarning )

if args.raw_mask_import:
    if not os.path.isdir( maskdir ): os.makedirs( maskdir )
    if not os.path.isdir( geodir  ): os.makedirs( geodir  )
    with open( log_file, 'a' ) as lf: lf.write( 'Rejected external masks:\n')
    from pyris import import_raw_mask
    title = 'Importing raw mask obtained outside PyRIS'
    print(); print(title); print('-'*len(title))
    if args.raw_dir is None:
        title = 'Extracting river mask from raw .tif mask in internal directory: %s' % rawdir
        print(); print(title); print('-'*len(title))
        import_raw_mask( cf, rawdir, geodir, maskdir, auto_label=args.label, log_file=log_file )
    else:
        title = 'Extracting river mask from raw .tif mask in external directory: %s' % args.raw_dir
        print(); print(title); print('-'*len(title))
        rawdir = args.raw_dir
        import_raw_mask( cf, rawdir, geodir, maskdir, auto_label=args.label, log_file=log_file )

# Manually Clean Masks
# --------------------
if args.clean_mask is not None:
    if args.clean_label == 'single':
        from pyris import clean_masks
        if args.config is not None:
            title = 'Manual cleaning of channel masks in internal directory'
            print(); print(title); print('-'*len(title))
            if len( args.clean_mask ) == 0:
                clean_masks( maskdir, geodir=geodir, config=cf, file_only=False )
            else:
                for f in args.clean_mask:
                    path, file = os.path.split( f )
                    if path == '':
                        mask = os.path.join( maskdir, f )
                    else:
                        mask = f
                    clean_masks( mask, geodir=geodir, config=cf, file_only=True )
        else:
            title = 'Manual cleaning of external channel masks. The small object removal will use a 3 pixels river width.'
            print(); print(title); print('-'*len(title))
            if len( args.clean_mask ) == 1:
                path, file = os.path.split( args.clean_mask[0] )
                if file == '': 
                    maskdir = path
                    clean_masks( maskdir, file_only=False )
                else:
                    mask = args.clean_mask[0]
                    clean_masks( mask, file_only=True)
            elif len( args.clean_mask ) > 1:
                for mask in args.clean_mask:
                    clean_masks( mask, file_only=True )
            else:
                e = 'Missing config file if no mask directory or files are provided\n'
                parser.print_help()
                raise ParserException(e)
    elif args.clean_label == 'all':
        from pyris import clean_all_masks
        if args.config is not None:
            title = 'Manual cleaning of a series of channel masks in internal directory'
            print(); print(title); print('-'*len(title))
            if len( args.clean_mask ) == 0:
                clean_all_masks( maskdir, geodir, cf )
            elif len( args.clean_mask ) == 1:
                startmask = args.clean_mask[0]
                clean_all_masks( maskdir, geodir, cf, startmask=startmask )
            else:
                e = 'Too many arguments for --clean-mask with --clean-label=all, specify just one mask\n'
                parser.print_help()
                raise ParserException(e)
        else:
            e = 'Missing config file if --clean-label=all\n'
            parser.print_help()
            raise ParserException(e)
    else:
        e = 'Invalid argument for --clean-label. Must be single or all\n'
        parser.print_help()
        raise ParserException(e)

# Skeletonization
# ---------------
if args.skeletonization:
    if not os.path.isdir( skeldir ): os.makedirs( skeldir )
    if args.mask_dir is not None: maskdir = args.mask_dir
    from pyris import skeletonize_all
    title = 'Skeltonizing masks in internal directory: %s' % cf.get( 'Data', 'output' )
    print(); print(title); print('-'*len(title))
    skeletonize_all( maskdir, skeldir, cf )

# Extract Centerline
# ------------------
if args.axis:
    if not os.path.isdir( axisdir ): os.makedirs( axisdir )
    if args.mask_dir is not None: maskdir = args.mask_dir
    from pyris import vectorize_all
    title = 'Extracting centerlines from skeletons in internal directory: %s' % cf.get( 'Data', 'output' )
    print(); print(title); print('-'*len(title))
    vectorize_all( geodir, maskdir, skeldir, cf, axisdir, use_geo=(not args.no_geo) )

# Centerline Migration Rates
# --------------------------
if args.migration:
    from pyris import migration_rates
    pf = args.pfreq
    if args.axis_files is None and args.axis_dir is None and args.config is not None:
        if not os.path.isdir( migdir ): os.makedirs( migdir )
        title = 'Computing migration rates from centerlines in internal directory: %s' % cf.get( 'Data', 'output' )
        print(); print(title); print('-'*len(title))
        axisfiles = [ os.path.join( axisdir, f ) for f in sorted( os.listdir( axisdir ) ) ]
        migration_rates( axisfiles, migdir, columns=(0,1), show=args.show, pfreq=pf )
    elif args.axis_files is not None and args.config is None:
        if not os.path.isdir( args.output_dir ): os.makedirs( args.output_dir )
        title = 'Computing migration rates from files: %s' % args.axis_files
        print(); print(title); print('-'*len(title))
        migration_rates( args.axis_files, args.output_dir, columns=args.axis_columns, show=args.show, pfreq=pf )
    elif args.axis_dir is not None and args.config is None:
        axis_files = [ os.path.join(args.axis_dir, f) for f in sorted(os.listdir(args.axis_dir)) ]
        if not os.path.isdir( args.output_dir ): os.makedirs( args.output_dir )
        title = 'Computing migration rates from directory: %s' % args.axis_dir
        print(); print(title); print('-'*len(title))
        migration_rates( axis_files, args.output_dir, columns=args.axis_columns, show=args.show, pfreq=pf )
    else:
        if args.axis_dir is not None and args.axis_files is not None:
            raise ParserException('--axis-files or --axis-dir cannot be provided together')
        else:
            raise ParserException('Either --axis-files, --axis-dir or config must be provided')

# Bars Position
# -------------
if args.bars:
    if not os.path.isdir( bardir ): os.makedirs( bardir )
    from pyris import bars_detection
    title = 'Decesting bars from centerlines in internal directory: %s' % cf.get( 'Data', 'output' )
    bars_detection( landsat_dirs, geodir, axisdir, migdir, bardir, show=args.show )

# print elapsed time
toc.print_elapsed_time()